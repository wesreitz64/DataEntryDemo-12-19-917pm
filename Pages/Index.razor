@page "/"

@using System.ComponentModel.DataAnnotations;
@using DataEntryDemo.Utils.Attributes;

@inject PlaywrightService PlaywrightService
<PageTitle>Data Entry Demo</PageTitle>
<h2>Enter Details</h2>

<EditForm Model="@CarData" OnValidSubmit="OnHandleSubmit" OnInvalidSubmit="OnHandleInvalidSubmit">
	<DataAnnotationsValidator />
	<div style="width:100%">
		<ValidationSummary />
	</div><br />
	<div style="width: 50%; float:left;margin-top: 5px;">
		<label style="width: 90%;">
			Name<br />
			<InputText ValueExpression="@(() => CarData.Car.Name)" Value="@CarData.Car.Name" ValueChanged="@((string value) => HandleOnChange(value, "Name"))"
			class="form-control" style="width: 100%;" ></InputText>
			<ValidationMessage For="@(() => CarData.Car.Name)" />
		</label><br /><br />
		<label style="width: 90%;">
			Color<br />
			<InputSelect ValueExpression="@(() => CarData.Car.ColorId)" Value="@CarData.Car.ColorId" ValueChanged="@((int value) => HandleOnChange(value, "Color"))"
			class="form-control" style="width: 100%;">
				@if (CarData?.Colors != null)
				{
					@foreach (var color in CarData.Colors)
					{
						<option value="@color.Id">@color.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.ColorId)" />
		</label><br /><br />
		<label style="width: 90%;">
			Year<br />
			<InputText ValueExpression="@(() => CarData.Car.Year)" Value="@CarData.Car.Year" ValueChanged="@((string value) => HandleOnChange(value, "Year"))"
			class="form-control" style="width: 100%;"></InputText>
		</label><br /><br />
		<label style="width: 90%;">
			Model<br />
			<InputSelect ValueExpression="@(() => CarData.Car.ModelId)" Value="@CarData.Car.ModelId" ValueChanged="@((int value) => HandleOnChange(value, "Model"))"
			class="form-control" style="width: 100%;">
				@if (CarData?.Models != null)
				{
					@foreach (var model in CarData.Models)
					{
						<option value="@model.Id">@model.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.ModelId)" />
		</label><br /><br />
		<label style="width: 90%;">
			Quanity<br />
			<InputText ValueExpression="@(() => CarData.Car.Quantity)" Value="@CarData.Car.Quantity" ValueChanged="@((string value) => HandleOnChange(value, "Quantity"))"
			class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Quantity)" />
		</label><br /><br />
		<button @onclick="@(() => CarData = new())" class="btn btn-secondary" tabindex="0" style="float:left;">Cancel</button>
	</div>
	<div style="width: 50%; float:left;">
		<label style="width: 90%;">
			Release Date<br />
			<InputDate ValueExpression="@(() => CarData.Car.ReleaseDate)" Value="@CarData.Car.ReleaseDate" ValueChanged="@((DateTime? value) => HandleOnChange(value, "ReleaseDate"))"
			class="form-control" style="width: 100%;" placeholder="Release Date"></InputDate>

		</label><br /><br />
		<label style="width: 90%;">
			Last Available Date<br />
			<InputDate ValueExpression="@(() => CarData.Car.LastAvailableDate)" Value="@CarData.Car.LastAvailableDate" ValueChanged="@((DateTime? value) => HandleOnChange(value, "LastAvailableDate"))"
			class="form-control" style="width: 100%;"></InputDate>
			<ValidationMessage For="@(() => CarData.Car.LastAvailableDate)" />
		</label><br /><br />
		<label style="width: 90%;">
			Total<br />
			<InputText ValueExpression="@(() => CarData.Car.Total)" Value="@CarData.Car.Total" ValueChanged="@((string value) => HandleOnChange(value, "Total"))"
			class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Total)" />
		</label><br /><br />
		<label style="width: 90%;">
			Owner<br />
			<InputText ValueExpression="@(() => CarData.Car.Owner)" Value="@CarData.Car.Owner" ValueChanged="@((string value) => HandleOnChange(value, "Owner"))"
			class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Owner)" />
		</label><br /><br />
		<label style="width: 90%;">
			Status<br />
			<InputSelect ValueExpression="@(() => CarData.Car.StatusId)" Value="@CarData.Car.StatusId" ValueChanged="@((int value) => HandleOnChange(value, "Status"))"
			class="form-control" style="width: 100%;">
				@if (CarData?.Statuses != null)
				{
					@foreach (var status in CarData.Statuses)
					{
						<option value="@status.Id">@status.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.StatusId)" />
		</label><br /><br />
		@* <button type="submit" tabindex="0" class="btn btn-primary" style="float:right;margin-right: 10%;">Create</button> *@
	</div>
</EditForm>


@code {
	public CarModel? CarData { get; set; }
	public bool ValidSubmit { get; set; } = false;

	protected async Task<ValidationResult> HandleOnChange(object value, string controlId = "")
	{
		bool isValid = false;
		string errorMessage = "";

		ValidationResult validationResult = new ValidationResult("");

		switch (controlId)
		{
			case "Name":
				string nameValue = value.ToString().Trim();
				isValid = IsValidName(nameValue, ref errorMessage);
				if (isValid)
				{
					CarData.Car.Name = nameValue.ToString();
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Color":
				int colorValue = Int32.Parse(value.ToString());
				isValid = IsValidColor(colorValue);

				if (isValid)
				{
					CarData.Car.ColorId = colorValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Year":
				string yearValue = value.ToString();
				isValid = IsValidYear(yearValue);

				if (isValid)
				{
					CarData.Car.Year = yearValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Model":
				int modelValue = Int32.Parse(value.ToString());
				isValid = IsValidModel(modelValue);

				if (isValid)
				{
					CarData.Car.ModelId = modelValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Quantity":
				string quantityValue = value.ToString();
				isValid = IsValidQuanity(quantityValue);

				if (isValid)
				{
					CarData.Car.Quantity = quantityValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}

				break;

			case "ReleaseDate":
				DateTime releaseDateValue = Convert.ToDateTime(value.ToString());
				isValid = IsValidReleaseDate(releaseDateValue);

				if (isValid)
				{
					CarData.Car.ReleaseDate = releaseDateValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}

				break;

			case "LastAvailableDate":
				DateTime lastAvailableDateValue = Convert.ToDateTime(value.ToString());
				isValid = IsValidLastAvailableDate(lastAvailableDateValue);

				if (isValid)
				{
					CarData.Car.LastAvailableDate = lastAvailableDateValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Total":
				string totalValue = value.ToString();
				isValid = IsValidTotal(totalValue);

				if (isValid)
				{
					CarData.Car.Total = totalValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Owner":
				string ownerValue = value.ToString();
				isValid = IsValidOwner(ownerValue);

				if (isValid)
				{
					CarData.Car.Owner = ownerValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;

			case "Status":
				int statusValue = Int32.Parse(value.ToString());
				isValid = IsValidStatus(statusValue);

				if (isValid)
				{
					CarData.Car.StatusId = statusValue;
				}
				else
				{
					validationResult = new ValidationResult(errorMessage, new[] { controlId });
				}
				break;
		}


		SendCarData(CarData.Car);


		return validationResult;
	}

	protected void OnHandleSubmit()
	{
		var errors = new Dictionary<string, List<string>>();

		if (String.IsNullOrEmpty(CarData.Car.Name))
		{
			errors.Add(nameof(CarData.Car.Name), new() { "Name is required" });
		}

		if (errors.Any())
		{

		}
		else
		{
			ValidSubmit = true;
		}


		@if (ValidSubmit)
		{
			StateHasChanged();
			Console.WriteLine("Successful submission");
		}
	}

	protected void OnHandleInvalidSubmit()
	{


	}

	protected async Task SendCarData(Index.Car car)
	{
		var f = car;
		await PlaywrightService.FillInFormAsync(car);
	}

	protected void Cancel()
	{


	}
	protected async override Task OnInitializedAsync()
	{
		CarData = new CarModel();

		CarData.Colors = await PopulateColors();
		CarData.Models = await PopulateModels();
		CarData.Statuses = await PopulateStatus();
		base.OnInitialized();
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await PlaywrightService.InitializeBrowserAsync();
	//	await PlaywrightService.PerformManualLoginAsync("https://acc3inter01.pegalabs.io/prweb/...");

	await PlaywrightService.NavigateAndLoginAsync("https://acc3inter01.pegalabs.io/prweb/...", "wesley.reitz@acc3int.com", "Install@1234");
		await PlaywrightService.NavigateToDataFormAsync();

	}

	protected void Dispose()
	{
	}

	private bool IsValidName(string value, ref string errorMessage)
	{
		if (string.IsNullOrEmpty(value))
		{
			errorMessage = "Name is required.";
			return false;
		}

		return true;
	}

	private bool IsValidColor(int value)
	{


		return true;
	}

	private bool IsValidYear(string value)
	{


		return true;
	}

	private bool IsValidModel(int value)
	{


		return true;
	}

	private bool IsValidQuanity(string value)
	{


		return true;
	}

	private bool IsValidReleaseDate(DateTime value)
	{


		return true;
	}

	private bool IsValidLastAvailableDate(DateTime value)
	{


		return true;
	}

	private bool IsValidTotal(string value)
	{


		return true;
	}

	private bool IsValidOwner(string value)
	{


		return true;
	}

	private bool IsValidStatus(int value)
	{


		return true;
	}


	private async Task<List<Color>> PopulateColors()
	{
		return await Task.Run(() =>
			new List<Color>()
			{
				new Color() { Id = 0, Description = ""},
				new Color() { Id = 1, Description = "Black"},
				new Color() { Id = 2, Description = "White"},
				new Color() { Id = 3, Description = "Blue"},
				new Color() { Id = 4, Description = "Silver"},
				new Color() { Id = 5, Description = "Red"}
			});
	}

	private async Task<List<Model>> PopulateModels()
	{
		return await Task.Run(() =>
			new List<Model>()
				{
				new Model() { Id = 0, Description = ""},
				new Model() { Id = 1, Description = "Honda"},
				new Model() { Id = 2, Description = "Mercedes"},
				new Model() { Id = 3, Description = "BMW"},
				new Model() { Id = 4, Description = "Range Rover"},
				new Model() { Id = 5, Description = "Mazda"}
				});

	}

	private async Task<List<Status>> PopulateStatus()
	{
		return await Task.Run(() =>
			new List<Status>()
					{
				new Status() { Id = 0, Description = ""},
				new Status() { Id = 1, Description = "New"},
				new Status() { Id = 2, Description = "Used"},
				new Status() { Id = 3, Description = "Pre-owned"},
				new Status() { Id = 4, Description = "Mint"},
				new Status() { Id = 5, Description = "Questionable"}
					});
	}


	public class CarModel
	{
		[Required]
		public Car? Car { set; get; } = new Car();
		public List<Color>? Colors { set; get; } = new List<Color>();
		public List<Model>? Models { set; get; } = new List<Model>();
		public List<Status>? Statuses { set; get; } = new List<Status>();
	}

	public class Car
	{
		[Required]
		public string Name { set; get; } = "";
		[Required]
		[Range(1, 5)]
		public int ColorId { set; get; } = 0;
		[Required]
		[Range(2000, 2025)]
		public string? Year { set; get; } = null;
		[Required]
		[Range(1, 5)]
		public int ModelId { set; get; } = 0;
		[Required]
		[Range(1, 10)]
		public string? Quantity { set; get; } = null;
		[Required]
		[DataType(DataType.DateTime)]
		[DateMustBeBefore(nameof(LastAvailableDate))]
		public DateTime? ReleaseDate { set; get; }
		[Required]
		[DateMustBeAfter(nameof(ReleaseDate))]
		[DataType(DataType.DateTime)]
		public DateTime? LastAvailableDate { set; get; }
		[Required]
		public string? Total { set; get; } = null;
		[Required]
		public string? Owner { set; get; } = null;
		[Required]
		[Range(1, 5)]
		public int StatusId { set; get; } = 0;
	}

	public class Color
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}

	public class Model
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}

	public class Status
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}
}